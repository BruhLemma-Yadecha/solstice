# Generated by Django 5.2.1 on 2025-05-19 05:22

import apps.video_processing.models
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the video record.', primary_key=True, serialize=False)),
                ('file', models.FileField(help_text='The video file. Stored with a unique name (UUID based).', upload_to=apps.video_processing.models.get_hashed_video_upload_path)),
                ('original_filename', models.CharField(blank=True, help_text='Original name of the uploaded file by the user.', max_length=255)),
                ('file_hash', models.CharField(blank=True, db_index=True, help_text='SHA256 hash of the video file content for deduplication.', max_length=64, null=True, unique=True)),
                ('filesize', models.PositiveIntegerField(blank=True, help_text='Size of the video file in bytes.', null=True)),
                ('content_type', models.CharField(blank=True, help_text='MIME type of the video file (e.g., video/mp4).', max_length=100, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the video record was created.')),
            ],
            options={
                'verbose_name': 'Video File',
                'verbose_name_plural': 'Video Files',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the job.', primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Upload'), ('UPLOADED', 'Uploaded, Awaiting Pose Extraction'), ('POSE_EXTRACTION_QUEUED', 'Pose Extraction Queued'), ('EXTRACTING_POSE', 'Extracting Pose Data'), ('POSE_DATA_GENERATED', 'Pose Data Generated, Awaiting Armature Video'), ('ARMATURE_VIDEO_QUEUED', 'Armature Video Queued'), ('GENERATING_ARMATURE_VIDEO', 'Generating Armature Video'), ('COMPLETED', 'Processing Completed'), ('FAILED', 'Processing Failed'), ('CLEANED_UP', 'Output Cleaned Up')], default='PENDING', help_text='Current status of the processing job.', max_length=30)),
                ('pose_algorithm_id', models.PositiveIntegerField(help_text='Version of the pose extraction process used for this job.')),
                ('pose_data_file', models.FileField(blank=True, help_text='Intermediate pose data CSV file generated by the first job stage.', null=True, upload_to=apps.video_processing.models.get_pose_data_upload_path)),
                ('output_video_path', models.CharField(blank=True, help_text='Path or identifier for the final processed output video file.', max_length=1024, null=True)),
                ('output_generated_at', models.DateTimeField(blank=True, help_text='Timestamp when the final output video was generated.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the job was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the job was last updated.')),
                ('celery_pose_task_id', models.CharField(blank=True, help_text='Celery Task ID for pose extraction.', max_length=255, null=True)),
                ('celery_armature_task_id', models.CharField(blank=True, help_text='Celery Task ID for armature video generation.', max_length=255, null=True)),
                ('input_video', models.ForeignKey(help_text='The input video file for this job.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='jobs_as_input', to='video_processing.video')),
            ],
            options={
                'verbose_name': 'Video Job',
                'verbose_name_plural': 'Video Jobs',
                'ordering': ['-created_at'],
            },
        ),
    ]
